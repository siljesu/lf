/**
 * Micro-benchmark from the Savina benchmark suite.
 * Intended to measure message passing overhead by stress
 * testing the mailbox of actors.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Lacking the mailbox in the reactor model this benchmarks
 * measures message passing overhead and scheduling overhead
 * because of the necessary scheduling after each message which
 * is not necessary in the actor model.
 *
 *
 * For comparison some informal results for 1,000,000 messages
 *
 * @author Hannes Klein
 * @Abanob Bostouros
 */

 /* [[[cog
 # This file is a code generator using the python module cog:
 # See https://nedbatchelder.com/code/cog/
 #
 # All instructions for code  generation are in-lined in comments
 # like this one. With that you can use this file as a normal source file
 # but also to generate code.
 #
 # To change the generated code in-line within this file run:
 # $ python -m cog -r this-file.lf
 # To generate a new file from this file stripping the generator code in the process run:
 # $ python -m cog -d -o output-file.lf this-file.lf
 #
 # Use the command line option -D to specify generator parameters, for example:
 # $ python -m cog -r -D parameter=100 this-file.lf
 #
 # Generator parameters used in this file:
 # -D countTo=1000000
 #
 ]]] */
 // [[[end]]]

target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("threading: true,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("threading: false,")
    ]]] */
    threading: false,
    /// [[[end]]]
    fast: true
}

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor ProducerReactor(countTo:int(1000000)) {


    state i:int(0); // current counter value

    input inStartCounting:bool;

    logical action outFinishedCounting;
    output outResetCounter:bool;
    output outIncrement:bool;
    output outRetrieveResult:bool;
    output finished:bool;
    input inResult:int;
    logical action count;

    reaction(outFinishedCounting) -> finished {=
        //lf_request_stop();
        SET(finished, true);
    =}


    reaction(inStartCounting) -> count, outResetCounter {=
        // reset counter
        self->i = 0;
        SET(outResetCounter, true);

        lf_schedule(count,0);
    =}

    reaction(count) -> outIncrement, outRetrieveResult, count {=

        if(self->i < self->countTo) {
            SET(outIncrement,true);
            self->i += 1;
            lf_schedule(count,0);
        } else {
            SET(outRetrieveResult,true);
        }
    =}

    reaction(inResult) -> outFinishedCounting {=
        if(inResult->value != self->countTo) {
            printf("ProducerReactor expected %d, found: %d",self->countTo, inResult->value);
        } else {
            printf("SUCCESS! received: %d \n", inResult->value);
        }
        lf_schedule(outFinishedCounting, 0);
    =}
}


reactor CountingReactor {

    input inReset:bool;
    input inIncrement:bool;
    input inRetrieveResult:bool;
    output outSendResult:int;


    state count:int(0);



    reaction(inReset) {=
        self->count = 0;
    =}

    reaction(inIncrement) {=
        self->count++;
    =}

    reaction(inRetrieveResult) -> outSendResult {=
        SET(outSendResult,self->count);
    =}
}

/* [[[cog
cog.outl(f"main reactor Counting(numIterations:int({numIterations}), countTo:int({countTo}))")
]]] */
main reactor Counting(numIterations:int(12), countTo:int(1000000))
//[[[end]]]
{
    producer = new ProducerReactor(countTo = countTo);
    runner = new BenchmarkRunner(num_iterations=numIterations);

    reaction(startup) {=
        printBenchmarkInfo("CountingLFCBenchmark");
        printSystemInfo();
    =}

    runner.start -> producer.inStartCounting;
    producer.finished -> runner.finish;

    counter = new CountingReactor();

    producer.outIncrement -> counter.inIncrement;
    producer.outResetCounter -> counter.inReset;
    producer.outRetrieveResult -> counter.inRetrieveResult;
    counter.outSendResult -> producer.inResult;
}
