/**
 * Basic benchmark from the Savina benchmark suite that is
 * intended to measure message-passing overhead.
 * See [Benchmarks wiki page](https://github.com/icyphy/lingua-franca/wiki/Benchmarks).
 * This is based on https://www.scala-lang.org/old/node/54
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 *
 * Ping introduces a microstep delay using a logical action
 * to break the causality loop.
 *
 * To get a sense, some (informal) results for 1,000,000 ping-pongs
 * on my Mac:
 *
 * Unthreaded: 97 msec
 * Threaded: 265 msec
 *
 * There is no parallelism in this application, so it does not benefit from being
 * being threaded, just some additional overhead.
 *
 * These measurements are total execution time, including startup and shutdown.
 * These are about an order of magnitude faster than anything reported in the paper.
 *
 * @author Edward A. Lee
 */
target C {
    /* [[[cog
      if (threading=="True"):
          cog.outl("threading: true,")
          cog.outl(f"workers: {workers},")
          cog.outl(f"scheduler: {scheduler},")
      else:
          cog.outl("threading: false,")
    ]]] */
    threading: false,
    /// [[[end]]]
    fast: true,
    build: "../armgcc/build_nxp_unix.sh"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor Ping(count:int(100000)) {
    input receive:int;
    input start:bool;
    output send:int;
    output finished:bool;
    state pingsLeft:int(count);
    logical action serve;
    reaction (start, serve) -> send {=
        SET(send, self->pingsLeft--);
    =}
    reaction (receive) -> serve, finished {=
        if (self->pingsLeft > 0) {
            lf_schedule(serve, 0);
        } else {
            // reset pingsLeft for next iteration
            self->pingsLeft = self->count;
            SET(finished, true);
        }
    =}
}
reactor Pong(expected:int(100000)) {
    input receive:int;
    output send:int;
    input finish: bool;
    state count:int(0);
    reaction(receive) -> send {=
        self->count++;
        // lf_print("Received %d", receive->value);
        SET(send, receive->value);
    =}
    reaction(finish) {=
        if (self->count != self->expected) {
            lf_print_error_and_exit("Pong expected to receive %d inputs, but it received %d.\n",
                self->expected, self->count
            );
            exit(1);
        }
        printf("Success.\n");
        self->count = 0;
    =}
}

/*[[[cog
cog.outl(f'main reactor PingPong(numIterations:int({numIterations}), count:int({count}))')
]]] */
main reactor PingPong(numIterations:int(12), count:int(100000))
/// [[[end]]]
{
    runner = new BenchmarkRunner(num_iterations=numIterations);
    ping = new Ping(count=count);
    pong = new Pong(expected=count);

    reaction(startup) {=
        printBenchmarkInfo("PingPongLFCBenchmark");
        printSystemInfo();
    =}
    runner.start -> ping.start;
    ping.finished -> runner.finish;
    ping.finished -> pong.finish;
    ping.send -> pong.receive;
    pong.send -> ping.receive;
}
